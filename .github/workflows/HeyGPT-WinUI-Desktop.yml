name: HeyGPT

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      SOLUTION_FILE: ${{ github.workspace }}\src\apps\AndGPT.sln
      ARTIFACTS_BASE_DIR: ${{ github.workspace }}\Artifacts
      ARTIFACTS_BIN_DIR: ${{ github.workspace }}\Artifacts\bin
      OUTPUT_DIR: ${{ github.workspace }}\output
      DEPENDENCY_PACKAGES_DIR: ${{ github.workspace }}\Artifacts\DependencyPackages
      MSIX_OUTPUT_DIR: ${{ github.workspace }}\Artifacts\MSIX
      MSI_OUTPUT_DIR: ${{ github.workspace }}\Artifacts\MSI
      BUILD_ARTIFACTS_PATH: ${{ github.workspace }}\Artifacts\bin\${{ matrix.platform }}\${{ matrix.configuration }}\apps\HeyGPT
      PDB_OUTPUT_DIR: ${{ github.workspace }}\Artifacts\PDBs
      REF_ASSEMBLIES_DIR: ${{ github.workspace }}\Artifacts\ReferenceAssemblies
      PFX_BASE64: ${{ secrets.BASE64_ENCODED_PFX }}
      PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}

    strategy:
      matrix:
        platform: [x64] #, arm64]
        configuration: [Release] #, Debug]

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Setup MSBuild
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # Create artifacts directories
    - name: Create artifacts directories
      run: |
        New-Item -Path ${{ env.ARTIFACTS_BIN_DIR }} -ItemType Directory -Force
        New-Item -Path ${{ env.DEPENDENCY_PACKAGES_DIR }} -ItemType Directory -Force
        New-Item -Path ${{ env.MSIX_OUTPUT_DIR }} -ItemType Directory -Force
        New-Item -Path ${{ env.MSI_OUTPUT_DIR }} -ItemType Directory -Force
        New-Item -Path ${{ env.PDB_OUTPUT_DIR }} -ItemType Directory -Force
        New-Item -Path ${{ env.REF_ASSEMBLIES_DIR }} -ItemType Directory -Force

    # Cache dependencies to speed up builds
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.DEPENDENCY_PACKAGES_DIR }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Restore dependencies
    - name: Restore dependencies
      working-directory: ${{ github.workspace }}
      run: dotnet restore ${{ env.SOLUTION_FILE }} --packages ${{ env.DEPENDENCY_PACKAGES_DIR }}

    # Decode PFX file
    - name: Decode PFX file
      shell: pwsh
      run: |
        $bytes = [Convert]::FromBase64String("${{ env.PFX_BASE64 }}")
        [System.IO.File]::WriteAllBytes("signingkey.pfx", $bytes)

    # Copy reference assemblies
    - name: Copy reference assemblies
      shell: pwsh
      run: |
        Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter "*.dll" | ForEach-Object { Copy-Item $_.FullName ${{ env.REF_ASSEMBLIES_DIR }} }
        Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter "*.exe" | ForEach-Object { Copy-Item $_.FullName ${{ env.REF_ASSEMBLIES_DIR }} }

    # Create MSIX package
    - name: Create MSIX package
      env:
        APPX_BUNDLE: "Always"
        PACKAGE_BUILD_MODE: "SideLoad"
        DETERMINISTIC: "true"
        CI_BUILD: "true"
        MSIX_OUTPUT_DIR: ${{ env.MSIX_OUTPUT_DIR }}
      working-directory: ${{ github.workspace }}
      shell: pwsh
      run: |
        msbuild ${{ env.SOLUTION_FILE }} /t:Restore,Rebuild /p:Configuration=${{ matrix.configuration }} /p:AppxBundle=${{ env.APPX_BUNDLE }} /p:UapAppxPackageBuildMode=${{ env.PACKAGE_BUILD_MODE }} /p:Deterministic=${{ env.DETERMINISTIC }} /p:ContinuousIntegrationBuild=${{ env.CI_BUILD }} /p:Platform=${{ matrix.platform }} /p:PackageCertificateKeyFile=signingkey.pfx /p:PackageCertificatePassword=${{ env.PFX_PASSWORD }} /p:PackageOutputPath=${{ env.MSIX_OUTPUT_DIR }}

    # Delete PFX file
    - name: Delete PFX file
      shell: pwsh
      run: Remove-Item -Path signingkey.pfx -Force

    # Gather debug files
    - name: Gather debug files
      shell: pwsh
      run: |
        Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter "*.pdb" | ForEach-Object {
          if ($_.FullName -notlike "*${{ env.PDB_OUTPUT_DIR }}*") {
            Copy-Item $_.FullName ${{ env.PDB_OUTPUT_DIR }}
          }
        }

    # Zip debug files
    - name: Zip debug files
      shell: pwsh
      run: Compress-Archive -Path ${{ env.PDB_OUTPUT_DIR }}\* -DestinationPath ${{ env.PDB_OUTPUT_DIR }}\debug_files.zip -Force

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: HeyGPT-${{ matrix.platform }}-${{ matrix.configuration }}
        path: ${{ env.BUILD_ARTIFACTS_PATH }}\**
        retention-days: 5

    # Upload MSIX packages
    - name: Upload MSIX packages
      uses: actions/upload-artifact@v2
      with:
        name: HeyGPT-MSIX-${{ matrix.platform }}-${{ matrix.configuration }}
        path: ${{ env.MSIX_OUTPUT_DIR }}\**
        retention-days: 5

    # Upload debug files
    - name: Upload debug files
      uses: actions/upload-artifact@v2
      with:
        name: HeyGPT-Debug-Files-${{ matrix.platform }}-${{ matrix.configuration }}
        path: ${{ env.PDB_OUTPUT_DIR }}\debug_files.zip
        retention-days: 5

    # Upload reference assemblies
    - name: Upload reference assemblies
      uses: actions/upload-artifact@v2
      with:
        name: HeyGPT-Reference-Assemblies-${{ matrix.platform }}-${{ matrix.configuration }}
        path: ${{ env.REF_ASSEMBLIES_DIR }}\**
        retention-days: 30
