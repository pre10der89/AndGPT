# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps d

name: AndGPTWeb

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    # TODO: Figure out why we cannot build paths from other just declared ENVs
    env:
      Artifacts_Root_Directory:  ${{ github.workspace }}/Artifacts
      Src_Root_Directory:  ${{ github.workspace }}/src
      Apps_Root_Directory: ${{ github.workspace }}/src/apps

      Target_Solution_Path: ${{ github.workspace }}/src/apps/web/AndGPTWeb.sln
      TargetApp_Project_Path: ${{ github.workspace }}/src/apps/web/AndGPTWeb/AndGPTWeb.csproj

      App_Packages_Directory: ${{ github.workspace }}/Artifacts/AppPackages
      App_Packages_Archive: AppPackages.zip      
      Wap_Project_Directory: ${{ github.workspace }}/Artifacts
      Wap_Project_Path: ${{ github.workspace }}/src/apps/web/AndGPTWeb/AndGPTWeb.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Debug Paths
      run: |
          echo ${{ github.workspace }}
          echo $GITHUB_WORKSPACE
          echo Artifacts_Root_Directory [$env:Artifacts_Root_Directory]
          echo Src_Root_Directory [$env:Src_Root_Directory]
          echo Apps_Root_Directory [$env:Apps_Root_Directory]
          echo Target_Solution_Path [$env:Target_Solution_Path]
          echo App_Packages_Directory [$env:App_Packages_Directory]
          echo App_Packages_Archive [$env:App_Packages_Archive]
          echo Wap_Project_Directory [$env:Wap_Project_Directory]
          echo Wap_Project_Path [$env:Wap_Project_Path]

    # Execute all unit tests in the solution
    # - name: Execute unit tests
    #  run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers /p:RuntimeIdentifier=$env:RuntimeIdentifier
    - name: Restore the application
      run: msbuild $env:Target_Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:Platform=$env:Platform  
      env:
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
        RuntimeIdentifier: win-${{ matrix.platform }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = Join-Path -Path $env:Artifacts_Root_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      # run: msbuild $env:Target_Solution_Path /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=$env:Artifacts_Root_Directory/GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.PFX_KEY }} /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      run: msbuild $env:Target_Solution_Path /p:Configuration=$env:Configuration /p:Platform=$env:Platform
      env:
        Appx_Bundle: Never
        Appx_Bundle_Platforms: x64
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: ${{ env.App_Packages_Directory }}       
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
        RuntimeIdentifier: win-${{ matrix.platform }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Artifacts_Root_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    # - name: Upload build artifacts
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: MSIX Package
    #    path: ${{ env.App_Packages_Directory }}/**/*.msix

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Zip
        path: ${{ github.workspace }}/Artifacts/${{ matrix.platform }}/${{ matrix.configuration }}/apps/AndGPTWeb/**/*
        retention-days: 5
